<?php

namespace Versionable\Ration\Connection;

use Versionable\Ration\Connection\Cluster;

/**
 * Test class for Cluster.
 * Generated by PHPUnit on 2012-07-23 at 16:59:05.
 */
class ClusterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Cluster
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Cluster;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    protected function getConnection()
    {
        $connection = $this->getMock('Versionable\Ration\Connection\ConnectionInterface', array(
            'connect',
            'disconnect',
            'readLength',
            'read',
            'write',
            'call',
            'parseResponse'
        ), array(), 'Connection_'.  uniqid());
        
        return $connection;
    }

    /**
     * @covers Versionable\Ration\Connection\Cluster::addConnection
     */
    public function testAddConnection()
    {
        $connection = $this->getConnection();
        
        $this->object->addConnection($connection);
        $this->object->rewind();
        
        $this->assertEquals($connection, $this->object->current());
    }

    /**
     * @depends testAddConnection
     * @covers Versionable\Ration\Connection\Cluster::getConnection
     */
    public function testGetConnection()
    {
        $connection = $this->getConnection();
        
        $this->object->addConnection($connection);
        
        $this->assertEquals($connection, $this->object->getConnection());
    }
    
    /**
     * @depends testAddConnection
     * @covers Versionable\Ration\Connection\Cluster::getConnection
     */
    public function testGetConnectionMultiple()
    {
        $connection = $this->getConnection();
        $connection2 = $this->getConnection();
        
        $this->object->addConnection($connection);
        $this->object->addConnection($connection2);
        
        $this->assertContains($this->object->getConnection(), array(
            $connection,
            $connection2
        ));
    }

    /**
     * @covers Versionable\Ration\Connection\Cluster::connect
     */
    public function testConnect()
    {
        $this->object->connect();
    }

    /**
     * @depends testConnect
     * @depends testAddConnection
     * @covers Versionable\Ration\Connection\Cluster::call
     * @covers Versionable\Ration\Connection\Cluster::getConnection
     * @covers Versionable\Ration\Connection\Cluster::connect
     */
    public function testCall()
    {
        $request = $this->getMock('Versionable\Ration\Request\Request');
        
        $this->object->addConnection($this->getConnection());
        $this->assertEmpty($this->object->call($request));
    }

    /**
     * @covers Versionable\Ration\Connection\Cluster::disconnect
     */
    public function testDisconnect()
    {
        $this->object->addConnection($this->getConnection());
        
        $this->object->disconnect();
        $this->assertEquals(0, $this->object->count());
    }

    /**
     * @depends testAddConnection
     * @depends testCall
     * @covers Versionable\Ration\Connection\Cluster::addConnection
     * @covers Versionable\Ration\Connection\Cluster::call
     * @covers Versionable\Ration\Connection\Cluster::readLength
     */
    public function testReadLength()
    {
        $request = $this->getMock('Versionable\Ration\Request\Request');
        
        $this->object->addConnection($this->getConnection());
        $this->object->call($request);
        
        $this->assertEmpty($this->object->readLength());
    }

    /**
     * @depends testAddConnection
     * @depends testCall
     * @covers Versionable\Ration\Connection\Cluster::addConnection
     * @covers Versionable\Ration\Connection\Cluster::call
     * @covers Versionable\Ration\Connection\Cluster::read
     */
    public function testRead()
    {
        $request = $this->getMock('Versionable\Ration\Request\Request');
        
        $this->object->addConnection($this->getConnection());
        $this->object->call($request);
        
        $this->assertEmpty($this->object->read());
    }

    /**
     * @depends testAddConnection
     * @covers Versionable\Ration\Connection\Cluster::addConnection
     * @covers Versionable\Ration\Connection\Cluster::getConnection
     * @covers Versionable\Ration\Connection\Cluster::write
     */
    public function testWrite()
    {
        $this->object->addConnection($this->getConnection());
        $this->object->write('test');
    }

    /**
     * @depends testAddConnection
     * @depends testCall
     * @covers Versionable\Ration\Connection\Cluster::parseResponse
     */
    public function testParseResponse()
    {
        $request = $this->getMock('Versionable\Ration\Request\Request');
        
        $this->object->addConnection($this->getConnection());
        $this->object->call($request);
        
        $this->assertEmpty($this->object->parseResponse(''));
    }
}
