<?php

namespace Versionable\Ration\Connection;

use Versionable\Ration\Connection\Connection;
use Versionable\Ration\Stream\TestWrapper;
use Versionable\Ration\Connection\Stream\TCP;

/**
 * Test class for Connection.
 * Generated by PHPUnit on 2012-08-03 at 16:57:53.
 */
class ConnectionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Connection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Connection;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    protected function getStreamAddress()
    {
        $streamAddress = $this->getMock('\Versionable\Ration\Connection\Stream\StreamInterface');
        $streamAddress->expects($this->any())
                      ->method('getAddress')
                      ->will($this->returnValue(TestWrapper::SCHEME.'://test'));
        
        return $streamAddress;
    }
    
    /**
     * Register the custom stream wrapper before the class is instantiated
     */
    public static function setUpBeforeClass()
    {
        stream_wrapper_register(TestWrapper::SCHEME, '\Versionable\Ration\Stream\TestWrapper');
    }

    /**
     * @covers Versionable\Ration\Connection\Connection::getHandle
     */
    public function testGetHandle()
    {
        $this->assertNull($this->object->getHandle());
    }

    /**
     * @covers Versionable\Ration\Connection\Connection::getStreamAddress
     */
    public function testGetStreamAddress()
    {
        $this->assertNull($this->object->getStreamAddress());
    }

    /**
     * @depends testGetStreamAddress
     * @covers Versionable\Ration\Connection\Connection::setStreamAddress
     * @covers Versionable\Ration\Connection\Connection::getStreamAddress
     */
    public function testSetStreamAddress()
    {
        $streamAddress = $this->getMock('\Versionable\Ration\Connection\Stream\StreamInterface');
        
        $this->object->setStreamAddress($streamAddress);
        $this->assertEquals($streamAddress, $this->object->getStreamAddress());
    }

    /**
     * @depends testSetStreamAddress
     * @depends testGetStreamAddress
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::connect
     * @covers Versionable\Ration\Connection\Connection::setStreamAddress
     * @covers Versionable\Ration\Connection\Connection::getStreamAddress
     * @covers Versionable\Ration\Connection\Connection::getHandle
     */
    public function testConnect()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
    }
    
    /**
     * @depends testSetStreamAddress
     * @depends testGetStreamAddress
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::connect
     * @covers Versionable\Ration\Connection\Connection::setStreamAddress
     * @covers Versionable\Ration\Connection\Connection::getStreamAddress
     * @covers Versionable\Ration\Connection\Connection::getHandle
     * @expectedException Versionable\Ration\Connection\Exception\ConnectionException
     */
    public function testConnectException()
    {
        $streamAddress = $this->getMock('\Versionable\Ration\Connection\Stream\StreamInterface');
        
        $this->object->setStreamAddress($streamAddress);
        
        $this->object->connect();
    }

    /**
     * @depends testConnect
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::read
     * @covers Versionable\Ration\Connection\Connection::getHandle
     */
    public function testRead()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
        
        $this->assertEmpty($this->object->read());
    }

    /**
     * @depends testSetStreamAddress
     * @depends testGetStreamAddress
     * @depends testConnect
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::readLength
     * @covers Versionable\Ration\Connection\Connection::getHandle
     */
    public function testReadLength()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
        
        $this->assertEmpty($this->object->readLength());
    }

    /**
     * @depends testConnect
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::write
     * @covers Versionable\Ration\Connection\Connection::getHandle
     */
    public function testWrite()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
        
        $this->object->write('test');
    }
    
    /**
     * @depends testConnect
     * @depends testGetHandle
     * @covers Versionable\Ration\Connection\Connection::write
     * @covers Versionable\Ration\Connection\Connection::getHandle
     * @expectedException Versionable\Ration\Command\Exception\CommandException
     */
    public function testWriteException()
    {
        $this->object->write('test');
    }

    /**
     * @covers Versionable\Ration\Connection\Connection::getHandle
     * @covers Versionable\Ration\Connection\Connection::disconnect
     */
    public function testDisconnect()
    {
        $this->object->disconnect();
    }

    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     */
    public function testParseResponse()
    {
        $this->assertInstanceOf('Versionable\Ration\Response\Response', $this->object->parseResponse('test'));
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     * @covers Versionable\Ration\Connection\Connection::read
     */
    public function testParseResponseMulti()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
        
        $this->assertInternalType('array', $this->object->parseResponse('*2'));
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     */
    public function testParseResponseBreakEarly()
    {
        $this->object->parseResponse('*-1');
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     */
    public function testParseResponseMultilineBreakEarly()
    {
        $this->object->parseResponse('$-1');
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     * @covers Versionable\Ration\Connection\Connection::readLength
     */
    public function testParseResponseMultilineBlank()
    {
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->connect();
        
        $raw = '$0';
        $this->assertNull($this->object->parseResponse($raw));
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     * @covers Versionable\Ration\Connection\Connection::readLength
     * @todo implement testParseResponseMultiline
     */
    public function testParseResponseMultiline()
    {
        $this->markTestIncomplete(
            'Multiline responses cause an infinate loop as the next read does not terminate the response'
        );
    }
    
    /**
     * @depends testRead
     * @depends testReadLength
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     * @expectedException Versionable\Ration\Response\Exception\ResponseException
     */
    public function testParseResponseErrorException()
    {
        $this->object->parseResponse('-');
    }
    
    /**
     * @depends testConnect
     * @depends testRead
     * @depends testWrite
     * @depends testParseResponse
     * @covers Versionable\Ration\Connection\Connection::call
     * @covers Versionable\Ration\Connection\Connection::read
     * @covers Versionable\Ration\Connection\Connection::write
     * @covers Versionable\Ration\Connection\Connection::parseResponse
     */
    public function testCall()
    {
        $request = $this->getMock('\Versionable\Ration\Request\Request', array('buildRequest'));
        $request->expects($this->any())
                ->method('buildRequest')
                ->will($this->returnValue('TEST'));
        
        $this->object->setStreamAddress($this->getStreamAddress());
        $this->object->call($request);
    }
}
